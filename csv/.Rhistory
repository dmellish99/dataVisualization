fill = "Genre"
)
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(dataset_display,
columns =1:7, groupColumn = 9, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
# scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
labs(
title = "Song Metrics in Parallel Coordinates by Genre",
x = "Metric",
y = "Value",
fill = "Genre"
)
ggparcoord(dataset_display,aes(color=genre)
columns =1:7, groupColumn = 9, order = "anyClass",
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(dataset_display,aes(color=genre),
columns =1:7, groupColumn = 9, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
# scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
labs(
title = "Song Metrics in Parallel Coordinates by Genre",
x = "Metric",
y = "Value",
fill = "Genre"
)
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(aes(dataset_display,color=genre),
columns =1:7, groupColumn = 9, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
# scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
labs(
title = "Song Metrics in Parallel Coordinates by Genre",
x = "Metric",
y = "Value",
fill = "Genre"
)
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(dataset_display,
columns =1:7, groupColumn = 9, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
ggplot2::labs(color = "genre")
# scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
labs(
title = "Song Metrics in Parallel Coordinates by Genre",
x = "Metric",
y = "Value",
fill = "Genre"
)
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(dataset_display,
columns =1:7, groupColumn = 8, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
ggplot2::labs(color = "genre")
View(dataset_display)
library(shiny)
library(ggplot2)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$artist_song=as.factor(dataset$artist_song)
dataset$genre=as.factor(dataset$genre)
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
#  dataset_display <- data[data$genre %in% input$genres, ]
dataset_display<-dataset
ggparcoord(dataset_display,
columns =2:8, groupColumn = 1, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
ggplot2::labs(color = "genre")
# scale_color_viridis(discrete=TRUE) +
# theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
labs(
title = "Song Metrics in Parallel Coordinates by Genre",
x = "Metric",
y = "Value",
fill = "Genre"
)
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo <- read.csv('track_info.csv')
# Merge and process data
artists$track_id <- artists$song_id
trackinfo <- merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo <- merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song <- paste(trackinfo$artist, '_', trackinfo$track_name)
# Subset relevant columns
dataset <- trackinfo[, c(6:12, 14, 15, 20)]  # Adjust indices based on your data
# Define UI
ui <- fluidPage(
titlePanel("Parallel Coordinates of Song Metrics by Track"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "genres",
label = "Select Genre(s):",
choices = unique(trackinfo$genre),  # Replace with your genre column
selected = unique(trackinfo$genre)[1],  # Preselect the first genre
multiple = TRUE
)
),
mainPanel(
plotOutput("plot_idiom_3")
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive dataset based on selected genres
filtered_data <- reactive({
req(input$genres)  # Ensure input$genres is not NULL
dataset[dataset$genre %in% input$genres, ]
})
# Render the plot
output$plot_idiom_3 <- renderPlot({
ggparcoord(
data = filtered_data(),
columns = 2:9,            # Adjust columns to match your numeric variables
groupColumn = 10,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
})
}
# Run the App
shinyApp(ui = ui, server = server)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo <- read.csv('track_info.csv')
# Merge and process data
artists$track_id <- artists$song_id
trackinfo <- merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo <- merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song <- paste(trackinfo$artist, '_', trackinfo$track_name)
# Subset relevant columns
dataset <- trackinfo[, c(6:12, 14, 15, 20)]  # Adjust indices based on your data
View(dataset)
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features <- read.csv('csv/audiofeatures.csv')
require(par_coords_data())
req(par_coords_data())
ggparcoord(
data = par_coords_data(),
columns = 2:9,            # Adjust columns to match your numeric variables
groupColumn = 10,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
ggparcoord(
data = par_coords_data,
columns = 2:9,            # Adjust columns to match your numeric variables
groupColumn = 10,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$genre<-as.factor(dataset$genre)
# Define UI
ui <- fluidPage(
titlePanel("Parallel Coordinates of Song Metrics by Track"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "genres",
label = "Select Genre(s):",
choices = unique(trackinfo$genre),  # Replace with your genre column
selected = unique(trackinfo$genre)[1],  # Preselect the first genre
multiple = TRUE
)
),
mainPanel(
plotOutput("plot_idiom_3")
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive dataset based on selected genres
par_coords_data <- reactive({
req(input$genres)  # Ensure input$genres is not NULL
dataset[dataset$genre %in% input$genres, ]
})
# Render the plot
output$plot_idiom_3 <- renderPlot({
ggparcoord(
data = par_coords_data(),
columns = 2:9,            # Adjust columns to match your numeric variables
groupColumn = 10,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$genre<-as.factor(dataset$genre)
# Define UI
ui <- fluidPage(
titlePanel("Parallel Coordinates of Song Metrics by Track"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "genres",
label = "Select Genre(s):",
choices = unique(dataset$genre),  # Replace with your genre column
selected = unique(dataset$genre)[1],  # Preselect the first genre
multiple = TRUE
)
),
mainPanel(
plotOutput("plot_idiom_3")
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive dataset based on selected genres
par_coords_data <- reactive({
req(input$genres)  # Ensure input$genres is not NULL
dataset[dataset$genre %in% input$genres, ]
})
# Render the plot
output$plot_idiom_3 <- renderPlot({
ggparcoord(
data = par_coords_data(),
columns = 2:8,            # Adjust columns to match your numeric variables
groupColumn = 1,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features <- read.csv('audiofeatures.csv')
artists <- read.csv('artists.csv')
trackinfo<-read.csv('track_info.csv')
# Merge and process
artists$track_id<-artists$song_id
trackinfo<-merge(x = trackinfo, y = artists, by = "track_id", all.x = TRUE)
trackinfo<-merge(x = trackinfo, y = features, by = "track_id", all.x = TRUE)
trackinfo$artist_song=paste(trackinfo$artist,'-',trackinfo$track_name)
cols_to_keep<-c('artist_song','genre','happiness','acousticness','danceability','energy','speechiness','instrumentalness','liveness')
dataset<-trackinfo[,(names(trackinfo) %in% cols_to_keep)]
dataset$genre<-as.factor(dataset$genre)
# Define UI
ui <- fluidPage(
titlePanel("Parallel Coordinates of Song Metrics by Track"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "genres",
label = "Select Genre(s):",
choices = unique(dataset$genre),  # Replace with your genre column
selected = unique(dataset$genre)[1],  # Preselect the first genre
multiple = TRUE
)
),
mainPanel(
plotOutput("plot_idiom_3")
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive dataset based on selected genres
par_coords_data <- reactive({
req(input$genres)  # Ensure input$genres is not NULL
dataset[dataset$genre %in% input$genres, ]
})
# Render the plot
output$plot_idiom_3 <- renderPlot({
ggparcoord(
data = par_coords_data(),
columns = 2:8,            # Adjust columns to match your numeric variables
groupColumn = 1,         # Adjust for grouping (e.g., genres or artists)
showPoints = TRUE,
title = "Song Metrics by Genre"
) +
scale_color_viridis_d() + # Better color scale for discrete data
theme_minimal() +
labs(x = "Metrics", y = "Values", color = "Genre")
})
}
# Run the App
shinyApp(ui = ui, server = server)
print(unique(dataset$genre))
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
runApp('~/GitHub/dataVisualization')
# Merge and process data
artists_hist$track_id <- artists_hist$song_id
library(shiny)
library(ggplot2)
library(GGally)
# Load data
features_hist <- read.csv('audiofeatures.csv')
trackinfo_hist <- read.csv('track_info.csv')
artists_hist <- read.csv('artists.csv')
# Merge and process data
artists_hist$track_id <- artists_hist$song_id
artists_hist_track <- merge(x = artists_hist, y = features_hist, by = "track_id", all.x = TRUE)
artists_hist_track$genre <- as.factor(artists_hist_track$genre)
dataset_hist <- artists_hist_track
View(dataset_hist)
runApp('~/GitHub/dataVisualization')

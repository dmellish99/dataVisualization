print(genres)
all_genres=c()
for (elem in genres){
all_genres=append(all_genres,elem)
}
all_genres=append(all_genres,'All Genres')
print(all_genres)
# Define UI
ui <- fluidPage(
titlePanel("Histogram of BPM by Genre"),
sidebarLayout(
sidebarPanel(
selectInput("genres",
"Choose Genre(s):",
choices = genres,
selected = genres[1],  # Default to "All Genres"
multiple = TRUE),          # Enable multi-selection
actionButton("reset", "Reset All", class = "btn-primary")
),
mainPanel(
plotOutput("histPlot")
)
)
)
# Define Server Logic
server <- function(input, output, session) {
# Reactive value to store selected genres
selected_genres <- reactiveVal(c("All Genres"))
# When the reset button is clicked, reset selection to "All Genres"
observeEvent(input$reset, {
selected_genres(c("All Genres"))
updateSelectInput(session, "genres", selected = c("All Genres"))
})
output$histPlot <- renderPlot({
req(selected_genres())  # Ensure selected genres are available
# Get dataset based on selected genres
if ("All Genres" %in% selected_genres()) {
dataset <- data  # Use all data if "All Genres" is selected
} else {
dataset <- data[data$genre %in% selected_genres(), ]
}
# Create histogram with colors for each genre
ggplot(dataset, aes(x = BPM, fill = genre)) +
geom_histogram(bins = 30, position = "identity", alpha = 0.6) +
labs(title = "Histogram of BPM by Genre",
x = "BPM",
y = "Frequency") +
scale_fill_brewer(palette = "Set3") +  # Use a color palette for genres
theme_minimal()
})
# Observe changes in genre selection and update reactive value
observe({
selected_genres(input$genres)
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
genres <- unique(artists_track$genre)
print(genres)
all_genres=c()
for (elem in genres){
all_genres=append(all_genres,elem)
}
all_genres=append(all_genres,'All Genres')
print(all_genres)
# Define UI
ui <- fluidPage(
titlePanel("Histogram of BPM by Genre"),
sidebarLayout(
sidebarPanel(
selectInput("genres",
"Choose Genre(s):",
choices = all_genres,
selected = all_genres[-1],  # Default to "All Genres"
multiple = TRUE),          # Enable multi-selection
actionButton("reset", "Reset All", class = "btn-primary")
),
mainPanel(
plotOutput("histPlot")
)
)
)
# Define Server Logic
server <- function(input, output, session) {
# Reactive value to store selected genres
selected_genres <- reactiveVal(c("All Genres"))
# When the reset button is clicked, reset selection to "All Genres"
observeEvent(input$reset, {
selected_genres(c("All Genres"))
updateSelectInput(session, "genres", selected = c("All Genres"))
})
output$histPlot <- renderPlot({
req(selected_genres())  # Ensure selected genres are available
# Get dataset based on selected genres
if ("All Genres" %in% selected_genres()) {
dataset <- data  # Use all data if "All Genres" is selected
} else {
dataset <- data[data$genre %in% selected_genres(), ]
}
# Create histogram with colors for each genre
ggplot(dataset, aes(x = BPM, fill = genre)) +
geom_histogram(bins = 30, position = "identity", alpha = 0.6) +
labs(title = "Histogram of BPM by Genre",
x = "BPM",
y = "Frequency") +
scale_fill_brewer(palette = "Set3") +  # Use a color palette for genres
theme_minimal()
})
# Observe changes in genre selection and update reactive value
observe({
selected_genres(input$genres)
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
genres <- unique(artists_track$genre)
print(all_genres)
# Define UI
ui <- fluidPage(
titlePanel("Histogram of BPM by Genre"),
sidebarLayout(
sidebarPanel(
selectInput("genres",
"Choose Genre(s):",
choices = genres,
selected = genres[1],  # Default to "All Genres"
multiple = TRUE),          # Enable multi-selection
actionButton("reset", "Reset All", class = "btn-primary")
),
mainPanel(
plotOutput("histPlot")
)
)
)
# Define Server Logic
server <- function(input, output) {
output$histPlot <- renderPlot({
# Filter dataset by selected genres
req(input$genres)  # Ensure input$genres is not NULL
dataset <- data[data$genre %in% input$genres, ]
# Create histogram with colors for each genre
ggplot(dataset, aes(x = BPM, fill = genre)) +
geom_histogram(bins = 20, position = "identity", alpha = 0.6) +
labs(title = "Histogram of BPM by Genre",
x = "BPM",
y = "Frequency") +
scale_fill_brewer(palette = "Set3") +  # Use a color palette for genres
theme_minimal()
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
cols <- colnames(artists_track)
print(cols)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
print(cols)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=(artists_track)[6]
print(cols)
print(col_group_by)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
data <- artists_track
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
print(cols)
print(col_group_by)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,6:12]
print(data)
library(shiny)
library(ggplot2)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,6:12]
print(data[,1])
library(shiny)
library(ggplot2)
library(hrbrthemes)
library(GGally)
library(viridis)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,c(6:12,14,15)]
# Unique genres for dropdown menu
genres <- unique(data$genre)
print(genres)
# Define UI
ui <- fluidPage(
titlePanel("Histogram of BPM by Genre"),
sidebarLayout(
sidebarPanel(
selectInput("genres",
"Choose Genre(s):",
choices = genres,
selected = genres[1],  # Default to "All Genres"
multiple = TRUE),          # Enable multi-selection
actionButton("reset", "Reset All", class = "btn-primary")
),
mainPanel(
plotOutput("histPlot")
)
)
)
# Define Server Logic
server <- function(input, output) {
output$histPlot <- renderPlot({
# Filter dataset by selected genres
req(input$genres)  # Ensure input$genres is not NULL
dataset <- data[data$genre %in% input$genres, ]
ggparcoord(dataset,
columns =2:9, groupColumn = 1, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
xlab("")
})
}
# Run the App
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(hrbrthemes)
library(GGally)
library(viridis)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,c(6:12,14,15)]
# Unique genres for dropdown menu
genres <- unique(data$genre)
print(genres)
# Define UI
ui <- fluidPage(
titlePanel("Histogram of BPM by Genre"),
# sidebarLayout(
#   sidebarPanel(
#     selectInput("genres",
#                 "Choose Genre(s):",
#                 choices = genres,
#                 selected = genres[1],  # Default to "All Genres"
#                 multiple = TRUE),          # Enable multi-selection
#
#     actionButton("reset", "Reset All", class = "btn-primary")
#
#   ),
#
mainPanel(
plotOutput("histPlot")
)
)
)
library(shiny)
library(ggplot2)
library(hrbrthemes)
library(GGally)
library(viridis)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,c(6:12,14,15)]
# Unique genres for dropdown menu
genres <- unique(data$genre)
print(genres)
# Define UI
ui <- fluidPage(
titlePanel("Song Metrics by Genre (Parallel Coordinates"),
# sidebarLayout(
#   sidebarPanel(
#     selectInput("genres",
#                 "Choose Genre(s):",
#                 choices = genres,
#                 selected = genres[1],  # Default to "All Genres"
#                 multiple = TRUE),          # Enable multi-selection
#
#     actionButton("reset", "Reset All", class = "btn-primary")
#
#   ),
#
mainPanel(
plotOutput("histPlot")
)
)
)
library(shiny)
library(ggplot2)
library(hrbrthemes)
library(GGally)
library(viridis)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,c(6:12,14,15)]
# Unique genres for dropdown menu
genres <- unique(data$genre)
print(genres)
# Define UI
ui <- fluidPage(
titlePanel("Song Metrics by Genre (Parallel Coordinates"),
sidebarLayout(
#   sidebarPanel(
#     selectInput("genres",
#                 "Choose Genre(s):",
#                 choices = genres,
#                 selected = genres[1],  # Default to "All Genres"
#                 multiple = TRUE),          # Enable multi-selection
#
#     actionButton("reset", "Reset All", class = "btn-primary")
#
#   ),
#
mainPanel(
plotOutput("parallelPlot")
)
)
)
library(shiny)
library(ggplot2)
library(hrbrthemes)
library(GGally)
library(viridis)
# Load data
data <- read.csv('audiofeatures.csv')
trackinfo <- read.csv('track_info.csv')
artists <- read.csv('artists.csv')
# Merge and process data
artists$track_id <- artists$song_id
artists_track <- merge(x = artists, y = data, by = "track_id", all.x = TRUE)
artists_track$genre <- as.factor(artists_track$genre)
# Unique genres for dropdown menu
cols <- colnames(artists_track)[7:12]
col_group_by=colnames(artists_track)[6]
data <- artists_track[,c(6:12,14,15)]
# Unique genres for dropdown menu
genres <- unique(data$genre)
print(genres)
# Define UI
ui <- fluidPage(
titlePanel("Song Metrics by Genre (Parallel Coordinates"),
sidebarLayout(
sidebarPanel(
# selectInput("genres",
#             "Choose Genre(s):",
#             choices = genres,
#             selected = genres[1],  # Default to "All Genres"
#             multiple = TRUE),          # Enable multi-selection
#
# actionButton("reset", "Reset All", class = "btn-primary")
),
#
mainPanel(
plotOutput("parallelPlot")
)
)
)
# Define Server Logic
server <- function(input, output) {
output$parallelPlot <- renderPlot({
# Filter dataset by selected genres
# req(input$genres)  # Ensure input$genres is not NULL
# dataset <- data[data$genre %in% input$genres, ]
dataset<-data
ggparcoord(dataset,
columns =2:9, groupColumn = 1, order = "anyClass",
#scale="center",
showPoints = TRUE,
title = "Standardize and center variables",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
xlab("")
})
}
# Run the App
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document")
